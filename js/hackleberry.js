// Generated by CoffeeScript 1.6.3
(function() {
  var _global;

  _global = this;

  if (_global.HACKLEBERRY != null) {
    _global.HACKLEBERRY;
  }

  _global.HACKLEBERRY = {
    /*
    * StyleSheetをベンダープレフィックスつけて切り替える
    */

    changeStylesheet: function(args) {
      var head, i, os, prefix, rtn, type, ua, val, _i, _len, _ref;
      ua = navigator.userAgent;
      head = document.getElementsByTagName('head')[0];
      type;
      os = '';
      if (ua.match(/AppleWebKit/)) {
        type = 'webkit';
      } else if (ua.match(/Opera/)) {
        type = 'o';
      } else if (ua.match(/Firefox/)) {
        type = 'moz';
      } else if (ua.match(/Trident/)) {
        type = 'ms';
      }
      _ref = args.file;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        val = _ref[i];
        os;
        prefix = args.pure ? '' : "" + type + "_";
        if (args.ios_android_change) {
          if (ua.indexOf('iPhone') > 0 || ua.indexOf('iPad') > 0 || ua.indexOf('iPod') > 0) {
            os = 'ios_';
          } else if (ua.indexOf('Android') > 0) {
            os = 'android_';
          }
        }
        rtn = '<link rel="stylesheet" type="text/css" href="' + args.path + prefix + os + val + '">';
        document.write(rtn);
      }
    },
    /*
    * 指定されたスクロール位置になったらposition:fixedの切り替えを行う
    */

    scrollFixed: function(args) {
      var adjustment, d, elmObj, fixed, flag, getScrollTop, minWidth, normal, scrollFunc;
      d = document;
      elmObj = d.getElementById(args.id);
      flag = false;
      minWidth = args.responsiveMinWidth != null ? args.responsiveMinWidth : false;
      adjustment = args.adjustment != null ? args.adjustment : false;
      getScrollTop = function() {
        return d.documentElement.scrollTop || d.body.scrollTop;
      };
      fixed = function() {
        elmObj.setAttribute('class', 'fixed');
        if (adjustment) {
          elmObj.parentNode.style.height = "" + adjustment + "px";
          flag = true;
        }
      };
      normal = function() {
        elmObj.removeAttribute('class');
        if (adjustment) {
          elmObj.parentNode.removeAttribute('style');
          return flag = false;
        }
      };
      scrollFunc = function() {
        if (getScrollTop() > args.position && !flag && window.innerWidth > minWidth) {
          fixed();
        } else if (getScrollTop() < args.position && flag) {
          normal();
        } else if (window.innerWidth <= minWidth) {
          normal();
        }
      };
      window.addEventListener('scroll', scrollFunc);
    },
    /*
    * 指定されたクラスが付与されている要素に
    * touchイベント発火時にtappedクラスを付与する
    */

    tapped: function(args) {
      var changeFunc, d, elm, elms, offFunc, _i, _len;
      d = document;
      elms = d.getElementsByClassName(args);
      changeFunc = function() {
        event.stopPropagation();
        if (!/tapped/.test(this.className)) {
          this.className += ' tapped';
        } else {
          this.className = this.className.replace('tapped', '');
        }
      };
      offFunc = function() {
        this.className = this.className.replace('tapped', '');
      };
      for (_i = 0, _len = elms.length; _i < _len; _i++) {
        elm = elms[_i];
        elm.addEventListener('touchstart', changeFunc, false);
        elm.addEventListener('touchmove', offFunc, false);
        elm.addEventListener('touchend', offFunc, false);
      }
    },
    /*
    * toggle
    * 表示切替
    */

    toggle: function(args) {
      var d, eventFunc, eventType, flag, init, initCallback, toggleCallback, toggleContents, toggleContentsArrayFlag, toggleContentsCheck, toggleEvent, toggleFunc;
      d = document;
      toggleEvent = d.getElementById(args.action);
      toggleContentsArrayFlag = args.contents instanceof Array;
      toggleContents = '';
      flag = args.visible ? true : false;
      eventType = args.event_type === 'touch' ? 'tochstart' : 'click';
      initCallback = args.initCallback ? args.initCallback : function() {};
      toggleCallback = args.toggleCallback ? args.toggleCallback : function() {};
      toggleContentsCheck = function() {
        var elm, _i, _len, _ref;
        if (toggleContentsArrayFlag) {
          toggleContents = [];
          _ref = args.contents;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            elm = _ref[_i];
            toggleContents.push(d.getElementById(elm));
          }
        } else {
          toggleContents = d.getElementById(args.contents);
        }
      };
      toggleFunc = function() {
        var elm, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;
        if (!flag) {
          if (!toggleContentsArrayFlag) {
            if (toggleContents.className.indexOf(args.hideClass) < 0) {
              toggleContents.className += ' ' + args.hideClass;
            }
            if (toggleContents.className.indexOf(args.showClass) > 0) {
              toggleContents.className = toggleContents.className.replace(args.showClass, '');
            }
          } else {
            for (_i = 0, _len = toggleContents.length; _i < _len; _i++) {
              elm = toggleContents[_i];
              if (elm.className.indexOf(args.hideClass) < 0) {
                elm.className += ' ' + args.hideClass;
              }
            }
            for (_j = 0, _len1 = toggleContents.length; _j < _len1; _j++) {
              elm = toggleContents[_j];
              if (elm.className.indexOf(args.showClass) > 0) {
                elm.className = elm.className.replace(args.showClass, '');
              }
            }
          }
        } else {
          if (!toggleContentsArrayFlag) {
            if (toggleContents.className.indexOf(args.showClass) < 0) {
              toggleContents.className += ' ' + args.showClass;
            }
            if (toggleContents.className.indexOf(args.hideClass) > 0) {
              toggleContents.className = toggleContents.className.replace(args.hideClass, '');
            }
          } else {
            _ref = args.contents;
            for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
              elm = _ref[_k];
              if (elm.className.indexOf(args.showClass) < 0) {
                elm.className += ' ' + args.showClass;
              }
            }
            _ref1 = args.contents;
            for (_l = 0, _len3 = _ref1.length; _l < _len3; _l++) {
              elm = _ref1[_l];
              if (elm.className.indexOf(args.hideClass) > 0) {
                elm.className = elm.className.replace(args.hideClass, '');
              }
            }
          }
        }
      };
      eventFunc = function() {
        return toggleEvent.addEventListener(eventType, function() {
          flag = flag ? false : true;
          toggleFunc();
          toggleCallback();
        }, false);
      };
      init = function() {
        toggleContentsCheck();
        eventFunc();
        toggleFunc();
        initCallback();
      };
    }
  };

}).call(this);
